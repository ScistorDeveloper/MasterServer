/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.scistor.process.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-19")
public class MasterService {

  public interface Iface {

    public String addOperators(String xmlContent) throws TException;

    public String removeOperators(List<String> operatorMainClassList) throws TException;

    public String registerComponent(String componentName, String mainclass, ByteBuffer componentInfo) throws TException;

  }

  public interface AsyncIface {

    public void addOperators(String xmlContent, AsyncMethodCallback resultHandler) throws TException;

    public void removeOperators(List<String> operatorMainClassList, AsyncMethodCallback resultHandler) throws TException;

    public void registerComponent(String componentName, String mainclass, ByteBuffer componentInfo, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String addOperators(String xmlContent) throws TException
    {
      send_addOperators(xmlContent);
      return recv_addOperators();
    }

    public void send_addOperators(String xmlContent) throws TException
    {
      addOperators_args args = new addOperators_args();
      args.setXmlContent(xmlContent);
      sendBase("addOperators", args);
    }

    public String recv_addOperators() throws TException
    {
      addOperators_result result = new addOperators_result();
      receiveBase(result, "addOperators");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOperators failed: unknown result");
    }

    public String removeOperators(List<String> operatorMainClassList) throws TException
    {
      send_removeOperators(operatorMainClassList);
      return recv_removeOperators();
    }

    public void send_removeOperators(List<String> operatorMainClassList) throws TException
    {
      removeOperators_args args = new removeOperators_args();
      args.setOperatorMainClassList(operatorMainClassList);
      sendBase("removeOperators", args);
    }

    public String recv_removeOperators() throws TException
    {
      removeOperators_result result = new removeOperators_result();
      receiveBase(result, "removeOperators");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeOperators failed: unknown result");
    }

    public String registerComponent(String componentName, String mainclass, ByteBuffer componentInfo) throws TException
    {
      send_registerComponent(componentName, mainclass, componentInfo);
      return recv_registerComponent();
    }

    public void send_registerComponent(String componentName, String mainclass, ByteBuffer componentInfo) throws TException
    {
      registerComponent_args args = new registerComponent_args();
      args.setComponentName(componentName);
      args.setMainclass(mainclass);
      args.setComponentInfo(componentInfo);
      sendBase("registerComponent", args);
    }

    public String recv_registerComponent() throws TException
    {
      registerComponent_result result = new registerComponent_result();
      receiveBase(result, "registerComponent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerComponent failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOperators(String xmlContent, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      addOperators_call method_call = new addOperators_call(xmlContent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOperators_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String xmlContent;
      public addOperators_call(String xmlContent, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlContent = xmlContent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOperators", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOperators_args args = new addOperators_args();
        args.setXmlContent(xmlContent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOperators();
      }
    }

    public void removeOperators(List<String> operatorMainClassList, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      removeOperators_call method_call = new removeOperators_call(operatorMainClassList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeOperators_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> operatorMainClassList;
      public removeOperators_call(List<String> operatorMainClassList, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.operatorMainClassList = operatorMainClassList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeOperators", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeOperators_args args = new removeOperators_args();
        args.setOperatorMainClassList(operatorMainClassList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeOperators();
      }
    }

    public void registerComponent(String componentName, String mainclass, ByteBuffer componentInfo, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      registerComponent_call method_call = new registerComponent_call(componentName, mainclass, componentInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerComponent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String componentName;
      private String mainclass;
      private ByteBuffer componentInfo;
      public registerComponent_call(String componentName, String mainclass, ByteBuffer componentInfo, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.componentName = componentName;
        this.mainclass = mainclass;
        this.componentInfo = componentInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerComponent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerComponent_args args = new registerComponent_args();
        args.setComponentName(componentName);
        args.setMainclass(mainclass);
        args.setComponentInfo(componentInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerComponent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOperators", new addOperators());
      processMap.put("removeOperators", new removeOperators());
      processMap.put("registerComponent", new registerComponent());
      return processMap;
    }

    public static class addOperators<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOperators_args> {
      public addOperators() {
        super("addOperators");
      }

      public addOperators_args getEmptyArgsInstance() {
        return new addOperators_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOperators_result getResult(I iface, addOperators_args args) throws TException {
        addOperators_result result = new addOperators_result();
        result.success = iface.addOperators(args.xmlContent);
        return result;
      }
    }

    public static class removeOperators<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeOperators_args> {
      public removeOperators() {
        super("removeOperators");
      }

      public removeOperators_args getEmptyArgsInstance() {
        return new removeOperators_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeOperators_result getResult(I iface, removeOperators_args args) throws TException {
        removeOperators_result result = new removeOperators_result();
        result.success = iface.removeOperators(args.operatorMainClassList);
        return result;
      }
    }

    public static class registerComponent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerComponent_args> {
      public registerComponent() {
        super("registerComponent");
      }

      public registerComponent_args getEmptyArgsInstance() {
        return new registerComponent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerComponent_result getResult(I iface, registerComponent_args args) throws TException {
        registerComponent_result result = new registerComponent_result();
        result.success = iface.registerComponent(args.componentName, args.mainclass, args.componentInfo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOperators", new addOperators());
      processMap.put("removeOperators", new removeOperators());
      processMap.put("registerComponent", new registerComponent());
      return processMap;
    }

    public static class addOperators<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOperators_args, String> {
      public addOperators() {
        super("addOperators");
      }

      public addOperators_args getEmptyArgsInstance() {
        return new addOperators_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addOperators_result result = new addOperators_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOperators_result result = new addOperators_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOperators_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addOperators(args.xmlContent,resultHandler);
      }
    }

    public static class removeOperators<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeOperators_args, String> {
      public removeOperators() {
        super("removeOperators");
      }

      public removeOperators_args getEmptyArgsInstance() {
        return new removeOperators_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            removeOperators_result result = new removeOperators_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeOperators_result result = new removeOperators_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeOperators_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.removeOperators(args.operatorMainClassList,resultHandler);
      }
    }

    public static class registerComponent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerComponent_args, String> {
      public registerComponent() {
        super("registerComponent");
      }

      public registerComponent_args getEmptyArgsInstance() {
        return new registerComponent_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            registerComponent_result result = new registerComponent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerComponent_result result = new registerComponent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerComponent_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.registerComponent(args.componentName, args.mainclass, args.componentInfo,resultHandler);
      }
    }

  }

  public static class addOperators_args implements org.apache.thrift.TBase<addOperators_args, addOperators_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOperators_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperators_args");

    private static final org.apache.thrift.protocol.TField XML_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlContent", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOperators_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOperators_argsTupleSchemeFactory());
    }

    public String xmlContent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XML_CONTENT((short)1, "xmlContent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XML_CONTENT
            return XML_CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XML_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("xmlContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperators_args.class, metaDataMap);
    }

    public addOperators_args() {
    }

    public addOperators_args(
      String xmlContent)
    {
      this();
      this.xmlContent = xmlContent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperators_args(addOperators_args other) {
      if (other.isSetXmlContent()) {
        this.xmlContent = other.xmlContent;
      }
    }

    public addOperators_args deepCopy() {
      return new addOperators_args(this);
    }

    @Override
    public void clear() {
      this.xmlContent = null;
    }

    public String getXmlContent() {
      return this.xmlContent;
    }

    public addOperators_args setXmlContent(String xmlContent) {
      this.xmlContent = xmlContent;
      return this;
    }

    public void unsetXmlContent() {
      this.xmlContent = null;
    }

    /** Returns true if field xmlContent is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlContent() {
      return this.xmlContent != null;
    }

    public void setXmlContentIsSet(boolean value) {
      if (!value) {
        this.xmlContent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XML_CONTENT:
        if (value == null) {
          unsetXmlContent();
        } else {
          setXmlContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XML_CONTENT:
        return getXmlContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XML_CONTENT:
        return isSetXmlContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperators_args)
        return this.equals((addOperators_args)that);
      return false;
    }

    public boolean equals(addOperators_args that) {
      if (that == null)
        return false;

      boolean this_present_xmlContent = true && this.isSetXmlContent();
      boolean that_present_xmlContent = true && that.isSetXmlContent();
      if (this_present_xmlContent || that_present_xmlContent) {
        if (!(this_present_xmlContent && that_present_xmlContent))
          return false;
        if (!this.xmlContent.equals(that.xmlContent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_xmlContent = true && (isSetXmlContent());
      list.add(present_xmlContent);
      if (present_xmlContent)
        list.add(xmlContent);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOperators_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetXmlContent()).compareTo(other.isSetXmlContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlContent, other.xmlContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOperators_args(");
      boolean first = true;

      sb.append("xmlContent:");
      if (this.xmlContent == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlContent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperators_argsStandardSchemeFactory implements SchemeFactory {
      public addOperators_argsStandardScheme getScheme() {
        return new addOperators_argsStandardScheme();
      }
    }

    private static class addOperators_argsStandardScheme extends StandardScheme<addOperators_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperators_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XML_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlContent = iprot.readString();
                struct.setXmlContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperators_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlContent != null) {
          oprot.writeFieldBegin(XML_CONTENT_FIELD_DESC);
          oprot.writeString(struct.xmlContent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperators_argsTupleSchemeFactory implements SchemeFactory {
      public addOperators_argsTupleScheme getScheme() {
        return new addOperators_argsTupleScheme();
      }
    }

    private static class addOperators_argsTupleScheme extends TupleScheme<addOperators_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperators_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXmlContent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXmlContent()) {
          oprot.writeString(struct.xmlContent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperators_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xmlContent = iprot.readString();
          struct.setXmlContentIsSet(true);
        }
      }
    }

  }

  public static class addOperators_result implements org.apache.thrift.TBase<addOperators_result, addOperators_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOperators_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperators_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOperators_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOperators_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperators_result.class, metaDataMap);
    }

    public addOperators_result() {
    }

    public addOperators_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperators_result(addOperators_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addOperators_result deepCopy() {
      return new addOperators_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addOperators_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperators_result)
        return this.equals((addOperators_result)that);
      return false;
    }

    public boolean equals(addOperators_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOperators_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOperators_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperators_resultStandardSchemeFactory implements SchemeFactory {
      public addOperators_resultStandardScheme getScheme() {
        return new addOperators_resultStandardScheme();
      }
    }

    private static class addOperators_resultStandardScheme extends StandardScheme<addOperators_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperators_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperators_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperators_resultTupleSchemeFactory implements SchemeFactory {
      public addOperators_resultTupleScheme getScheme() {
        return new addOperators_resultTupleScheme();
      }
    }

    private static class addOperators_resultTupleScheme extends TupleScheme<addOperators_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperators_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperators_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeOperators_args implements org.apache.thrift.TBase<removeOperators_args, removeOperators_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeOperators_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOperators_args");

    private static final org.apache.thrift.protocol.TField OPERATOR_MAIN_CLASS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorMainClassList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOperators_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOperators_argsTupleSchemeFactory());
    }

    public List<String> operatorMainClassList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPERATOR_MAIN_CLASS_LIST((short)1, "operatorMainClassList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPERATOR_MAIN_CLASS_LIST
            return OPERATOR_MAIN_CLASS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPERATOR_MAIN_CLASS_LIST, new org.apache.thrift.meta_data.FieldMetaData("operatorMainClassList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOperators_args.class, metaDataMap);
    }

    public removeOperators_args() {
    }

    public removeOperators_args(
      List<String> operatorMainClassList)
    {
      this();
      this.operatorMainClassList = operatorMainClassList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOperators_args(removeOperators_args other) {
      if (other.isSetOperatorMainClassList()) {
        List<String> __this__operatorMainClassList = new ArrayList<String>(other.operatorMainClassList);
        this.operatorMainClassList = __this__operatorMainClassList;
      }
    }

    public removeOperators_args deepCopy() {
      return new removeOperators_args(this);
    }

    @Override
    public void clear() {
      this.operatorMainClassList = null;
    }

    public int getOperatorMainClassListSize() {
      return (this.operatorMainClassList == null) ? 0 : this.operatorMainClassList.size();
    }

    public java.util.Iterator<String> getOperatorMainClassListIterator() {
      return (this.operatorMainClassList == null) ? null : this.operatorMainClassList.iterator();
    }

    public void addToOperatorMainClassList(String elem) {
      if (this.operatorMainClassList == null) {
        this.operatorMainClassList = new ArrayList<String>();
      }
      this.operatorMainClassList.add(elem);
    }

    public List<String> getOperatorMainClassList() {
      return this.operatorMainClassList;
    }

    public removeOperators_args setOperatorMainClassList(List<String> operatorMainClassList) {
      this.operatorMainClassList = operatorMainClassList;
      return this;
    }

    public void unsetOperatorMainClassList() {
      this.operatorMainClassList = null;
    }

    /** Returns true if field operatorMainClassList is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorMainClassList() {
      return this.operatorMainClassList != null;
    }

    public void setOperatorMainClassListIsSet(boolean value) {
      if (!value) {
        this.operatorMainClassList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPERATOR_MAIN_CLASS_LIST:
        if (value == null) {
          unsetOperatorMainClassList();
        } else {
          setOperatorMainClassList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPERATOR_MAIN_CLASS_LIST:
        return getOperatorMainClassList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPERATOR_MAIN_CLASS_LIST:
        return isSetOperatorMainClassList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOperators_args)
        return this.equals((removeOperators_args)that);
      return false;
    }

    public boolean equals(removeOperators_args that) {
      if (that == null)
        return false;

      boolean this_present_operatorMainClassList = true && this.isSetOperatorMainClassList();
      boolean that_present_operatorMainClassList = true && that.isSetOperatorMainClassList();
      if (this_present_operatorMainClassList || that_present_operatorMainClassList) {
        if (!(this_present_operatorMainClassList && that_present_operatorMainClassList))
          return false;
        if (!this.operatorMainClassList.equals(that.operatorMainClassList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_operatorMainClassList = true && (isSetOperatorMainClassList());
      list.add(present_operatorMainClassList);
      if (present_operatorMainClassList)
        list.add(operatorMainClassList);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeOperators_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOperatorMainClassList()).compareTo(other.isSetOperatorMainClassList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorMainClassList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorMainClassList, other.operatorMainClassList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOperators_args(");
      boolean first = true;

      sb.append("operatorMainClassList:");
      if (this.operatorMainClassList == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorMainClassList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOperators_argsStandardSchemeFactory implements SchemeFactory {
      public removeOperators_argsStandardScheme getScheme() {
        return new removeOperators_argsStandardScheme();
      }
    }

    private static class removeOperators_argsStandardScheme extends StandardScheme<removeOperators_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOperators_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPERATOR_MAIN_CLASS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.operatorMainClassList = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.operatorMainClassList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOperatorMainClassListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOperators_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.operatorMainClassList != null) {
          oprot.writeFieldBegin(OPERATOR_MAIN_CLASS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.operatorMainClassList.size()));
            for (String _iter3 : struct.operatorMainClassList)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOperators_argsTupleSchemeFactory implements SchemeFactory {
      public removeOperators_argsTupleScheme getScheme() {
        return new removeOperators_argsTupleScheme();
      }
    }

    private static class removeOperators_argsTupleScheme extends TupleScheme<removeOperators_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOperators_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOperatorMainClassList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOperatorMainClassList()) {
          {
            oprot.writeI32(struct.operatorMainClassList.size());
            for (String _iter4 : struct.operatorMainClassList)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOperators_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.operatorMainClassList = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.operatorMainClassList.add(_elem6);
            }
          }
          struct.setOperatorMainClassListIsSet(true);
        }
      }
    }

  }

  public static class removeOperators_result implements org.apache.thrift.TBase<removeOperators_result, removeOperators_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeOperators_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOperators_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOperators_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOperators_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOperators_result.class, metaDataMap);
    }

    public removeOperators_result() {
    }

    public removeOperators_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOperators_result(removeOperators_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public removeOperators_result deepCopy() {
      return new removeOperators_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public removeOperators_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOperators_result)
        return this.equals((removeOperators_result)that);
      return false;
    }

    public boolean equals(removeOperators_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeOperators_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOperators_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOperators_resultStandardSchemeFactory implements SchemeFactory {
      public removeOperators_resultStandardScheme getScheme() {
        return new removeOperators_resultStandardScheme();
      }
    }

    private static class removeOperators_resultStandardScheme extends StandardScheme<removeOperators_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOperators_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOperators_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOperators_resultTupleSchemeFactory implements SchemeFactory {
      public removeOperators_resultTupleScheme getScheme() {
        return new removeOperators_resultTupleScheme();
      }
    }

    private static class removeOperators_resultTupleScheme extends TupleScheme<removeOperators_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOperators_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOperators_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerComponent_args implements org.apache.thrift.TBase<registerComponent_args, registerComponent_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerComponent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerComponent_args");

    private static final org.apache.thrift.protocol.TField COMPONENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("componentName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAINCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("mainclass", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COMPONENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("componentInfo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerComponent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerComponent_argsTupleSchemeFactory());
    }

    public String componentName; // required
    public String mainclass; // required
    public ByteBuffer componentInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPONENT_NAME((short)1, "componentName"),
      MAINCLASS((short)2, "mainclass"),
      COMPONENT_INFO((short)3, "componentInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPONENT_NAME
            return COMPONENT_NAME;
          case 2: // MAINCLASS
            return MAINCLASS;
          case 3: // COMPONENT_INFO
            return COMPONENT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPONENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("componentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAINCLASS, new org.apache.thrift.meta_data.FieldMetaData("mainclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPONENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("componentInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerComponent_args.class, metaDataMap);
    }

    public registerComponent_args() {
    }

    public registerComponent_args(
      String componentName,
      String mainclass,
      ByteBuffer componentInfo)
    {
      this();
      this.componentName = componentName;
      this.mainclass = mainclass;
      this.componentInfo = org.apache.thrift.TBaseHelper.copyBinary(componentInfo);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerComponent_args(registerComponent_args other) {
      if (other.isSetComponentName()) {
        this.componentName = other.componentName;
      }
      if (other.isSetMainclass()) {
        this.mainclass = other.mainclass;
      }
      if (other.isSetComponentInfo()) {
        this.componentInfo = org.apache.thrift.TBaseHelper.copyBinary(other.componentInfo);
      }
    }

    public registerComponent_args deepCopy() {
      return new registerComponent_args(this);
    }

    @Override
    public void clear() {
      this.componentName = null;
      this.mainclass = null;
      this.componentInfo = null;
    }

    public String getComponentName() {
      return this.componentName;
    }

    public registerComponent_args setComponentName(String componentName) {
      this.componentName = componentName;
      return this;
    }

    public void unsetComponentName() {
      this.componentName = null;
    }

    /** Returns true if field componentName is set (has been assigned a value) and false otherwise */
    public boolean isSetComponentName() {
      return this.componentName != null;
    }

    public void setComponentNameIsSet(boolean value) {
      if (!value) {
        this.componentName = null;
      }
    }

    public String getMainclass() {
      return this.mainclass;
    }

    public registerComponent_args setMainclass(String mainclass) {
      this.mainclass = mainclass;
      return this;
    }

    public void unsetMainclass() {
      this.mainclass = null;
    }

    /** Returns true if field mainclass is set (has been assigned a value) and false otherwise */
    public boolean isSetMainclass() {
      return this.mainclass != null;
    }

    public void setMainclassIsSet(boolean value) {
      if (!value) {
        this.mainclass = null;
      }
    }

    public byte[] getComponentInfo() {
      setComponentInfo(org.apache.thrift.TBaseHelper.rightSize(componentInfo));
      return componentInfo == null ? null : componentInfo.array();
    }

    public ByteBuffer bufferForComponentInfo() {
      return org.apache.thrift.TBaseHelper.copyBinary(componentInfo);
    }

    public registerComponent_args setComponentInfo(byte[] componentInfo) {
      this.componentInfo = componentInfo == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(componentInfo, componentInfo.length));
      return this;
    }

    public registerComponent_args setComponentInfo(ByteBuffer componentInfo) {
      this.componentInfo = org.apache.thrift.TBaseHelper.copyBinary(componentInfo);
      return this;
    }

    public void unsetComponentInfo() {
      this.componentInfo = null;
    }

    /** Returns true if field componentInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetComponentInfo() {
      return this.componentInfo != null;
    }

    public void setComponentInfoIsSet(boolean value) {
      if (!value) {
        this.componentInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPONENT_NAME:
        if (value == null) {
          unsetComponentName();
        } else {
          setComponentName((String)value);
        }
        break;

      case MAINCLASS:
        if (value == null) {
          unsetMainclass();
        } else {
          setMainclass((String)value);
        }
        break;

      case COMPONENT_INFO:
        if (value == null) {
          unsetComponentInfo();
        } else {
          setComponentInfo((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPONENT_NAME:
        return getComponentName();

      case MAINCLASS:
        return getMainclass();

      case COMPONENT_INFO:
        return getComponentInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPONENT_NAME:
        return isSetComponentName();
      case MAINCLASS:
        return isSetMainclass();
      case COMPONENT_INFO:
        return isSetComponentInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerComponent_args)
        return this.equals((registerComponent_args)that);
      return false;
    }

    public boolean equals(registerComponent_args that) {
      if (that == null)
        return false;

      boolean this_present_componentName = true && this.isSetComponentName();
      boolean that_present_componentName = true && that.isSetComponentName();
      if (this_present_componentName || that_present_componentName) {
        if (!(this_present_componentName && that_present_componentName))
          return false;
        if (!this.componentName.equals(that.componentName))
          return false;
      }

      boolean this_present_mainclass = true && this.isSetMainclass();
      boolean that_present_mainclass = true && that.isSetMainclass();
      if (this_present_mainclass || that_present_mainclass) {
        if (!(this_present_mainclass && that_present_mainclass))
          return false;
        if (!this.mainclass.equals(that.mainclass))
          return false;
      }

      boolean this_present_componentInfo = true && this.isSetComponentInfo();
      boolean that_present_componentInfo = true && that.isSetComponentInfo();
      if (this_present_componentInfo || that_present_componentInfo) {
        if (!(this_present_componentInfo && that_present_componentInfo))
          return false;
        if (!this.componentInfo.equals(that.componentInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_componentName = true && (isSetComponentName());
      list.add(present_componentName);
      if (present_componentName)
        list.add(componentName);

      boolean present_mainclass = true && (isSetMainclass());
      list.add(present_mainclass);
      if (present_mainclass)
        list.add(mainclass);

      boolean present_componentInfo = true && (isSetComponentInfo());
      list.add(present_componentInfo);
      if (present_componentInfo)
        list.add(componentInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerComponent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComponentName()).compareTo(other.isSetComponentName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComponentName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentName, other.componentName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMainclass()).compareTo(other.isSetMainclass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMainclass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainclass, other.mainclass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComponentInfo()).compareTo(other.isSetComponentInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComponentInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentInfo, other.componentInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerComponent_args(");
      boolean first = true;

      sb.append("componentName:");
      if (this.componentName == null) {
        sb.append("null");
      } else {
        sb.append(this.componentName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mainclass:");
      if (this.mainclass == null) {
        sb.append("null");
      } else {
        sb.append(this.mainclass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("componentInfo:");
      if (this.componentInfo == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.componentInfo, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerComponent_argsStandardSchemeFactory implements SchemeFactory {
      public registerComponent_argsStandardScheme getScheme() {
        return new registerComponent_argsStandardScheme();
      }
    }

    private static class registerComponent_argsStandardScheme extends StandardScheme<registerComponent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerComponent_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPONENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.componentName = iprot.readString();
                struct.setComponentNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAINCLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mainclass = iprot.readString();
                struct.setMainclassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMPONENT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.componentInfo = iprot.readBinary();
                struct.setComponentInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerComponent_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.componentName != null) {
          oprot.writeFieldBegin(COMPONENT_NAME_FIELD_DESC);
          oprot.writeString(struct.componentName);
          oprot.writeFieldEnd();
        }
        if (struct.mainclass != null) {
          oprot.writeFieldBegin(MAINCLASS_FIELD_DESC);
          oprot.writeString(struct.mainclass);
          oprot.writeFieldEnd();
        }
        if (struct.componentInfo != null) {
          oprot.writeFieldBegin(COMPONENT_INFO_FIELD_DESC);
          oprot.writeBinary(struct.componentInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerComponent_argsTupleSchemeFactory implements SchemeFactory {
      public registerComponent_argsTupleScheme getScheme() {
        return new registerComponent_argsTupleScheme();
      }
    }

    private static class registerComponent_argsTupleScheme extends TupleScheme<registerComponent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerComponent_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetComponentName()) {
          optionals.set(0);
        }
        if (struct.isSetMainclass()) {
          optionals.set(1);
        }
        if (struct.isSetComponentInfo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetComponentName()) {
          oprot.writeString(struct.componentName);
        }
        if (struct.isSetMainclass()) {
          oprot.writeString(struct.mainclass);
        }
        if (struct.isSetComponentInfo()) {
          oprot.writeBinary(struct.componentInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerComponent_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.componentName = iprot.readString();
          struct.setComponentNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mainclass = iprot.readString();
          struct.setMainclassIsSet(true);
        }
        if (incoming.get(2)) {
          struct.componentInfo = iprot.readBinary();
          struct.setComponentInfoIsSet(true);
        }
      }
    }

  }

  public static class registerComponent_result implements org.apache.thrift.TBase<registerComponent_result, registerComponent_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerComponent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerComponent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerComponent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerComponent_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerComponent_result.class, metaDataMap);
    }

    public registerComponent_result() {
    }

    public registerComponent_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerComponent_result(registerComponent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public registerComponent_result deepCopy() {
      return new registerComponent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public registerComponent_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerComponent_result)
        return this.equals((registerComponent_result)that);
      return false;
    }

    public boolean equals(registerComponent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerComponent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerComponent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerComponent_resultStandardSchemeFactory implements SchemeFactory {
      public registerComponent_resultStandardScheme getScheme() {
        return new registerComponent_resultStandardScheme();
      }
    }

    private static class registerComponent_resultStandardScheme extends StandardScheme<registerComponent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerComponent_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerComponent_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerComponent_resultTupleSchemeFactory implements SchemeFactory {
      public registerComponent_resultTupleScheme getScheme() {
        return new registerComponent_resultTupleScheme();
      }
    }

    private static class registerComponent_resultTupleScheme extends TupleScheme<registerComponent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerComponent_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerComponent_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
